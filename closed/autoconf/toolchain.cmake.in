# ===========================================================================
# (c) Copyright IBM Corp. 2019, 2024 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# =========================================================================

# Setting CMAKE_SYSTEM_NAME forces CMake into cross-compile mode, so only set
# it if we need to.
# Note: We consider Windows to be a cross-compile since CMake considers cygwin
# to be a different platform than Windows.
if("@COMPILE_TYPE@" STREQUAL "cross" OR  "@OPENJDK_TARGET_OS@" STREQUAL "windows")
	# CMAKE_SYSTEM_NAME expects the system name to start with a capital.
	set(temp_system_name "@OPENJDK_TARGET_OS@")
	string(SUBSTRING "${temp_system_name}" 0  1 first_char)
	string(TOUPPER "${first_char}" first_char)
	string(SUBSTRING "${temp_system_name}" 1 -1 CMAKE_SYSTEM_NAME)
	set(CMAKE_SYSTEM_NAME "${first_char}${CMAKE_SYSTEM_NAME}")
endif()

set(CMAKE_SYSTEM_PROCESSOR "@OPENJDK_TARGET_CPU@")

if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
	set(tool_dir "@OPENJ9_TOOL_DIR@")
	set(CMAKE_C_COMPILER "${tool_dir}/cl" CACHE FILEPATH "")
	set(CMAKE_CXX_COMPILER "${tool_dir}/cl" CACHE FILEPATH "")
	set(CMAKE_J9VM_CXX_COMPILER "${tool_dir}/clang" CACHE FILEPATH "")
	set(CMAKE_AR "${tool_dir}/lib" CACHE FILEPATH "")
	set(CMAKE_LINKER "${tool_dir}/link" CACHE FILEPATH "")
	set(CMAKE_MC_COMPILER "${tool_dir}/mc" CACHE FILEPATH "")
	set(CMAKE_RC_COMPILER "${tool_dir}/rc" CACHE FILEPATH "")
	if("@OPENJDK_TARGET_CPU_BITS@" EQUAL "64")
		set(CMAKE_ASM_MASM_COMPILER "${tool_dir}/ml64" CACHE FILEPATH "")
	else()
		set(CMAKE_ASM_MASM_COMPILER "${tool_dir}/ml" CACHE FILEPATH "")
	endif()
	set(CMAKE_ASM_NASM_COMPILER "${tool_dir}/nasm" CACHE FILEPATH "")

	set(CMAKE_Java_AR "${tool_dir}/jar" CACHE FILEPATH "")
	set(CMAKE_Java_RUNTIME "${tool_dir}/java" CACHE FILEPATH "")
	set(CMAKE_Java_COMPILER "${tool_dir}/javac" CACHE FILEPATH "")

	separate_arguments(FIXPATH UNIX_COMMAND "@FIXPATH@")
	set(OMR_EXE_LAUNCHER "${FIXPATH}" CACHE STRING "")

	# CMake will test to see if compiler works by getting it to compile files
	# in /usr/lib, which fixpath won't translate.
	set(CMAKE_C_COMPILER_WORKS True CACHE BOOL "")
	set(CMAKE_CXX_COMPILER_WORKS True CACHE BOOL "")
else()
	if(NOT CMAKE_C_COMPILER)
		set(CMAKE_C_COMPILER "@CC@")
	endif()

	if(NOT CMAKE_CXX_COMPILER)
		set(CMAKE_CXX_COMPILER "@CXX@")
	endif()

	if(NOT CMAKE_ASM_NASM_COMPILER)
		set(CMAKE_ASM_NASM_COMPILER "@NASM@")
	endif()
endif()

if("@COMPILE_TYPE@" STREQUAL "cross")
	set(CMAKE_SYSROOT @SYSROOT@)
	# Don't try searching for build tools in sysroot.
	set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
endif()
